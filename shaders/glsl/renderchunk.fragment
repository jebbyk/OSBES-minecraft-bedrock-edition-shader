// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 ES as appropriate.
//#extension GL_EXT_shader_framebuffer_fetch : require

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in vec2 uv1;
		#else
			_centroid in highp vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif //BYPASS_PIXEL_SHADER
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying highp vec2 uv0;
		varying vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#endif //VERSION


varying float isRain;

varying float isWater;
varying float isUnderWater;
varying vec4 color;
varying vec4 position;// Get pixel position in world space (used for calculate fake normals)
varying vec4 relativePosition;// Calculates from vec4 position
//#ifdef FOG
	varying vec4 fogColor;
//#endif //FOG

#include "uniformShaderConstants.h"
#include "util.h"
#include "uniformPerFrameConstants.h"
#include "includes/env_detectors.glsl"
#include "includes/texture_mapping.glsl"
#include "includes/random.glsl"
#include "includes/color_correction.glsl"
#include "includes/reflections.glsl"
#include "includes/lighting.glsl"
#include "includes/helpers.glsl"
#include "includes/fogs.glsl"


LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

varying vec4 blueFog;
varying vec4 milkyFog;


void main()
{
	#ifdef BYPASS_PIXEL_SHADER
		gl_FragColor = vec4(1.0, 0, 0, 1.0);
		return;
	#else 

	float isDay; float isHell; float isSunrize;
	detectEnvironment(isDay, isHell, isSunrize, TEXTURE_1);
	
	vec4 diffuseMap; vec3 reliefMap; vec4 rmeMap;
	readTextures(diffuseMap, reliefMap, rmeMap, TEXTURE_0, uv0);

	vec3 initialNormalVector = calculateRawNormalVector(position.xyz);
	vec3 normalVector = rotateNormals(initialNormalVector, reliefMap);

	vec4 diffuse = diffuseMap;
	diffuse.rgb *= color.rgb;
	
	float pointLightsMap; float ambientOclusionMap; float fakeShadowMap;
	readLightMaps(pointLightsMap, ambientOclusionMap, fakeShadowMap, uv1);

	fakeShadowMap += mapCaustics(TEXTURE_0, position.xyz);
	
	float  wetness = 0.0;
	if(isRain > 0.1 && isWater < 0.1){
		wetness = mapPuddles(TEXTURE_0, position.xz, isRain);	
		wetness = max(initialNormalVector.g * wetness, 0.5);
		wetness *= fakeShadowMap;
		//make normals to be flat on puddless
		normalVector = mix(normalVector, initialNormalVector, (wetness - 0.5) * 2.0);
		// make ground darker under puddless
		diffuse.rgb = mix(diffuse.rgb, vec3(0.25,0.25,0.25), wetness * isRain);		
	}

	float metalness; float roughness; float shininess;
	calculateMaterialProperties(metalness, roughness, shininess, rmeMap, wetness);
	float f0 = (metalness * 0.5) + ((1.0 - metalness) * 0.1);
	float f1 = 1.0;

#ifdef SEASONS_FAR
	diffuse.a = 1.0; //shader LOD (far trees and water becomes opaque)
#endif //SEASONS_FAR


#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif //APLPHA_TO_COVERAGE
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;// Cutout leaves and grass
#endif //USE_ALPHA_TEST
	

	vec4 skyLightDiffused = calculateSkyLightDiffused(normalVector, isRain, isDay, isHell);
	vec4 mainLightDiffused = calculateMainLightDiffused(normalVector, isDay);
	vec3 pointLightsDiffused = calculatePointLightsDiffused(pointLightsMap);


	vec3 viewDir = normalize(relativePosition.xyz);

	vec4 mainLightReflected = calculateMainLightsReflection(normalVector, viewDir, mainLightDiffused, shininess, isRain, isSunrize);
	vec4 pointLightsReflected = calculatePointLightsReflected(normalVector, viewDir, shininess, pointLightsDiffused);
	
	float fresnel = calculateFresnel(initialNormalVector, normalVector, viewDir, isWater, isRain, wetness);

	// Mix lighting
	vec3 resultLighting = skyLightDiffused.rgb * skyLightDiffused.a * ambientOclusionMap;	
	
	vec4 skyLightReflected = clamp(buildRawSkyReflection(relativePosition.xyz, resultLighting), 0.0, 1.0);
	
	resultLighting += pointLightsDiffused;
	resultLighting += mainLightDiffused.rgb * mainLightDiffused.a * fakeShadowMap * (1.0 - isRain);
	resultLighting += vec3(isHell * 0.175);// Ambient highlighting in hell
	diffuse.rgb *= resultLighting.rgb * 1.8 * (1.0 - metalness); 

	
	vec3 reflection = buildSkyPlaneReflection(relativePosition.xyz, normalVector, skyLightReflected, isRain, roughness);
    reflection += mainLightReflected.rgb * mainLightReflected.a * fakeShadowMap * 1.0;
	reflection += pointLightsReflected.rgb * pointLightsReflected.a * 4.0;
	vec3 metalnessReflection = diffuseMap.rgb * reflection * metalness;
	vec3 insulatorsReflection = reflection * (1.0 - metalness);

    diffuse.rgb = mix(diffuse.rgb, metalnessReflection * 1.25, metalness);
    diffuse.rgb = mix(diffuse.rgb, insulatorsReflection * 2.0, (f0 * (1.0 - fresnel) + f1 * fresnel) * (1.0 - metalness) * roughness);
	diffuse.a = max(diffuse.a, fresnel * 1.5);	
	diffuse.a += isWater * mainLightReflected.a; 
	
	
	if(isHell < 0.9){
		diffuse.rgb = applyBasicFogs(diffuse.rgb, skyLightDiffused.rgb, fogColor.a, milkyFog, isDay, isHell);
		diffuse.rgb = applyBlueFog(diffuse.rgb, blueFog, isDay, isRain, isWater); 
	}
	
	diffuse.rgb = colorCorrection(diffuse.rgb);

	diffuse.rgb = applyVanillaFog(diffuse.rgb, fogColor.a, isHell);//hide difference between colorCorrected and vanilla fog

	///////////////////////Debuging section//////////////////////
	// Debug texture coordinates
	//diffuse.rgb *= vec3(fract(uv0.x*32.0), fract(uv0.y*32.0), 1.0);

	// Debug position
	//diffuse.rgb = sin(position.xyz/2.545) * 0.5 + 0.5;

    // Debug tile texture
	// diffuse = texelFetch(TEXTURE_0, ivec2(position.xz * 128.0), 0);

	//vec3 sphereNormal = (normalize(position.xyz) + 1.0) / 2.0;
	//diffuse.rgb = sphereNormal;

	//diffuse.rgb = texelFetch(TEXTURE_1, ivec2(position.xz * 4.0),0).rgb;
	//diffuse.rgb = texture2D(TEXTURE_1, vec2(0.0, 1.0)).rgb;
	
	gl_FragColor = diffuse;
#endif // !BYPASS_PIXEL_SHADER
}
