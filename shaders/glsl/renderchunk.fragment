// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 ES as appropriate.
//#extension GL_EXT_shader_framebuffer_fetch : require

#include "fragmentVersionCentroid.h"

//quality settings
#include "includes/options/quality_settings/reflections/clouds_reflections_quality.glsl"
#include "includes/options/quality_settings/clouds/clouds_enabled.glsl"
#include "includes/options/quality_settings/reflections/clouds_reflection_enabled.glsl"
#include "includes/options/quality_settings/reflections/better_main_light_reflection.glsl"
#include "includes/options/quality_settings/reflections/main_light_reflection.glsl"
#include "includes/options/quality_settings/reflections/point_lights_reflection.glsl"
#include "includes/options/quality_settings/reflections/halo_reflection.glsl"
#include "includes/options/quality_settings/surface/normal_mapping.glsl"
#include "includes/options/quality_settings/surface/specular_mapping.glsl"
#include "includes/options/quality_settings/surface/puddles.glsl"
#include "includes/options/quality_settings/surface/water_details.glsl"
#include "includes/options/quality_settings/lighting/caustics.glsl"
#include "includes/options/quality_settings/lighting/shadows.glsl"
#include "includes/options/quality_settings/other/tone_mapping_enabled.glsl"
#include "includes/options/quality_settings/other/horizontal_fog.glsl"
#include "includes/options/quality_settings/other/distance_fog.glsl"

//presets
#include "includes/options/preset/clouds.glsl"
#include "includes/options/preset/lighting.glsl"
#include "includes/options/preset/fogs.glsl"
#include "includes/options/preset/surface.glsl"
#include "includes/options/preset/postprocessing.glsl"
#include "includes/options/preset/other.glsl"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in vec2 uv1;
		#else
			_centroid in highp vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif //BYPASS_PIXEL_SHADER
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying highp vec2 uv0;
		varying vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#endif //VERSION


varying float isRain;

varying float isWater;
varying float isUnderWater;
varying vec4 color;
varying highp vec4 position;// Get pixel position in world space (used for calculate fake normals)
varying vec4 relativePosition;// Calculates from vec4 position
//#ifdef FOG
	varying vec4 fogColor;
//#endif //FOG

#include "uniformShaderConstants.h"
#include "util.h"
#include "uniformPerFrameConstants.h"
#include "includes/env_detectors.glsl"
#include "includes/texture_mapping.glsl"
#include "includes/random.glsl"
#include "includes/color_correction.glsl"
#include "includes/reflections.glsl"
#include "includes/lighting.glsl"
#include "includes/helpers.glsl"
#include "includes/fogs.glsl"



LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

varying vec4 distanceFog;
varying vec4 milkyFog;


void main()
{
	#ifdef BYPASS_PIXEL_SHADER
		gl_FragColor = vec4(1.0, 0, 0, 1.0);
		return;
	#else 

	float isDay; float isHell; float isSunrize;
	detectEnvironment(isDay, isHell, isSunrize, TEXTURE_1);
	
	vec4 diffuseMap; vec3 reliefMap; vec4 rmeMap;
	readTextures(diffuseMap, reliefMap, rmeMap, TEXTURE_0, uv0);

	vec3 initialNormalVector = calculateRawNormalVector(position.xyz);
	
#if defined(NORMAL_MAPPING_ENABLED) & defined(PBR_FEATURE_ENABLED)
	vec3 normalVector = rotateNormals(initialNormalVector, reliefMap);
#else
	#ifdef WATER_DETAILS_ENABLED
		vec3 normalVector = rotateNormals(initialNormalVector, reliefMap);
	#else
    	vec3 normalVector = initialNormalVector;
	#endif
#endif
    
    vec4 diffuse = diffuseMap;
    #ifndef SEASONS
        
	    diffuse.rgb *= color.rgb;
	
    #else
    	vec2 uv = color.xy;
	    diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, color.b);
	    diffuse.rgb *= color.aaa;
	  //  diffuse.a = 1.0;
    #endif
	
	
	float pointLightsMap; float ambientOclusionMap; float fakeShadowMap;
	readLightMaps(pointLightsMap, ambientOclusionMap, fakeShadowMap, uv1);
	
    fakeShadowMap = clamp(fakeShadowMap, 0.0, 1.0);
    if(isUnderWater  > 0.9){
        fakeShadowMap = ambientOclusionMap; 
    }

	float  wetness = 0.0;
	
		if(isRain > 0.1 && isWater < 0.1){
			#ifdef PUDDLES_ENABLED
				wetness = mapPuddles(TEXTURE_0, position.xz, isRain);	
			#endif
			wetness = max(initialNormalVector.g * wetness, 0.5);
			wetness *= fakeShadowMap;
			//make normals to be flat on puddless
			normalVector = mix(normalVector, initialNormalVector, (wetness - 0.5) * 2.0);
			// make ground darker under puddless
			diffuse.rgb = mix(diffuse.rgb, vec3(0.25,0.25,0.25), wetness * isRain);		
		}


	
	float metalness; float roughness; float shininess;
	calculateMaterialProperties(metalness, roughness, shininess, rmeMap, wetness);
	float f0 = (metalness * 0.5) + ((1.0 - metalness) * 0.1);
	float f1 = 1.0;

#ifdef SEASONS_FAR
	diffuse.a = 1.0; //shader LOD (far trees and water becomes opaque)
#endif //SEASONS_FAR


#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif //APLPHA_TO_COVERAGE
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;// Cutout leaves and grass
#endif //USE_ALPHA_TEST
	

	vec4 skyLightDiffused = calculateSkyLightDiffused(normalVector, isRain, isDay, isHell);
	vec4 mainLightDiffused = calculateMainLightDiffused(normalVector, isDay);
	vec3 pointLightsDiffused = calculatePointLightsDiffused(pointLightsMap);


	vec3 viewDir = normalize(relativePosition.xyz);
	vec3 reflectedVector = reflect(viewDir, normalVector);


#ifdef MAIN_LIGHT_REFLECTION
	vec4 mainLightReflected = calculateMainLightsReflection(normalVector, viewDir, mainLightDiffused, shininess, isRain, isSunrize);
#endif

#ifdef POINT_LIGHTS_REFLECTION
	vec4 pointLightsReflected = calculatePointLightsReflected(normalVector, viewDir, shininess, pointLightsDiffused);
#endif
	
	float fresnel = calculateFresnel(initialNormalVector, normalVector, viewDir, isWater, isRain, wetness);

	// Mix lighting
	vec3 resultLighting = skyLightDiffused.rgb * skyLightDiffused.a * ambientOclusionMap;	

    //this two lines should be executed before building reflection
	resultLighting += vec3((isHell - isUnderWater ) * NETHER_AMBIENT_LIGHT_INTENSITY);// Ambient highlighting in hell gonna be refflected 
	resultLighting += pointLightsDiffused * 0.25;//imagine this is a reflection of 25% of an evironment hihglighted by point light
	

	vec4 skyLightReflected = clamp(buildRawSkyReflection(reflectedVector, resultLighting, 0.0, 16.0), 0.0, 1.0);

	
	resultLighting += pointLightsDiffused * 0.75;// remaining point ligt isnt beign reflected
	
	resultLighting += mainLightDiffused.rgb * mainLightDiffused.a * fakeShadowMap * (1.0 - isRain + isUnderWater);
	
	#ifdef CAUSTICS_ENABLED
		resultLighting += resultLighting * mapCaustics(TEXTURE_0, position.xyz, isUnderWater);
	#endif

	diffuse.rgb *= resultLighting.rgb * 1.8 * (1.0 - metalness); 

	#if defined(CLOUDS_ENABLED) && defined(CLOUDS_REFLECTION_ENABLED)
		vec3 reflection = buildSkyPlaneReflection(reflectedVector, skyLightReflected, isRain, roughness);
	#else
		vec3 reflection = skyLightReflected.rgb;
	#endif

	#ifdef MAIN_LIGHT_REFLECTION
		reflection += mainLightReflected.rgb * mainLightReflected.a * fakeShadowMap * 1.0;
	#endif

	#ifdef POINT_LIGHTS_REFLECTION
		reflection += pointLightsReflected.rgb * pointLightsReflected.a * 4.0;
	#endif

	#ifdef SPECULAR_MAPPING_ENABLED
		vec3 metalnessReflection = diffuseMap.rgb * reflection * metalness;
		diffuse.rgb = mix(diffuse.rgb, metalnessReflection * 1.25, metalness);
	#endif

	vec3 insulatorsReflection = reflection * (1.0 - metalness);

 
    diffuse.rgb = mix(diffuse.rgb, insulatorsReflection * 2.0, (f0 * (1.0 - fresnel) + f1 * fresnel) * (1.0 - metalness) * roughness);
	diffuse.a = max(diffuse.a, fresnel * 1.5);	
	
	#ifdef MAIN_LIGHT_REFLECTION
		diffuse.a += isWater * mainLightReflected.a; 
	#endif	
	
	if(isHell < 0.9){
		#ifdef DISTANCE_FOG_ENABLED
	    	diffuse.rgb = applyDistanceFog(diffuse.rgb, distanceFog, isDay, isRain, isWater);
		#endif
		
		diffuse.rgb = applyBasicFogs(diffuse.rgb, skyLightDiffused.rgb * 2.0, fogColor.a, milkyFog, isDay, isHell);
	}

	#ifdef TONE_MAPPING_ENABLED
		diffuse.rgb = colorCorrection(diffuse.rgb);
	#endif

	diffuse.rgb = applyVanillaFog(diffuse.rgb, fogColor.a, isHell, isUnderWater);//hide difference between colorCorrected and vanilla fog in hell

	///////////////////////Debuging section//////////////////////
	// Debug texture coordinates
	//diffuse.rgb *= vec3(fract(uv0.x*32.0), fract(uv0.y*32.0), 1.0);

	// Debug position
	// diffuse.rgb = sin(position.xyz/2.545) * 0.5 + 0.5;

    // Debug tile texture
	// diffuse = texelFetch(TEXTURE_0, ivec2(position.xz * 128.0), 0);

	//vec3 sphereNormal = (normalize(position.xyz) + 1.0) / 2.0;
	//diffuse.rgb = sphereNormal;

	//diffuse.rgb = texelFetch(TEXTURE_1, ivec2(position.xz * 4.0),0).rgb;
	//diffuse.rgb = texture2D(TEXTURE_1, vec2(0.0, 1.0)).rgb;

	// if(gl_FragCoord.x < 1920.0 * FOG_CONTROL.r && gl_FragCoord.y > 1000.0 && gl_FragCoord.y < 1050.0)
	// {
	// 	diffuse = vec4(0.0, 1.0, 0.0, 1.0);
	// }

	// if(gl_FragCoord.x < 1920.0 * FOG_CONTROL.g && gl_FragCoord.y > 900.0 && gl_FragCoord.y < 950.0)
	// {
	// 	diffuse = vec4(1.0, 1.0, 0.0, 1.0);
	// }
	
	gl_FragColor = diffuse;
#endif // !BYPASS_PIXEL_SHADER
}
