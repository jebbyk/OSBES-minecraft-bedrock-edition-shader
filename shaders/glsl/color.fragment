// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 ES as appropriate.

#include "fragmentVersionSimple.h"

#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"

#include "includes/random.glsl"
#include "includes/color_correction.glsl"

varying float height;
varying vec4 position;
varying float isUnderWater;

void main()
{
    
	float isRain = 1.0 - length(normalize(vec3(1.0)) - normalize(FOG_COLOR.rgb));// Calculate how complimentary fog color with gray color
	isRain = pow(isRain, 16.0);
	if(FOG_CONTROL.g > 0.95){
		isRain = 0.0;
	}

	vec3 clearSkyColor = pow(FOG_COLOR.rgb, vec3(0.8));
	
	vec3 clearSkyZenithColor = vec3(0.1, 0.2, 0.5) * length(clearSkyColor);
	vec3 rainSkyColor = vec3(0.6, 0.6, 0.6) * length(FOG_COLOR.rgb);

	float skyAttenuation = 1.0;
	float skyZenithEdgeOffset = 1.0;
	vec3 skyColor = mix(clearSkyZenithColor, clearSkyColor, pow(min(height * skyZenithEdgeOffset, 1.0), skyAttenuation));
	skyColor = mix(skyColor, rainSkyColor, isRain);

	float clouds = cloudsPerlin(4, position.xz);
	
	float cloudsShadow = pow(clamp(clouds * 1.5, 0.0, 1.0), 0.75);

	float cloudsCutout = pow(min(clouds * 1.75, 1.0), 1.0 * isRain + 64.0 * (1.0 - isRain));
	
	vec3 cloudsColor = vec3(1.5) * pow(length(FOG_COLOR.gb), 2.0);
	vec3 clearSkyCloudsShadowColor = (skyColor * (0.5 + pow(length(FOG_COLOR.gb), 2.0) * 0.5)) * 0.75;
	vec3 rainSkyCloudsShadowColor = cloudsColor * 2.0;
	vec3 cloudsShadowColor = mix(clearSkyCloudsShadowColor, rainSkyCloudsShadowColor, isRain);
	
	cloudsShadowColor = mix(cloudsShadowColor, vec3(length(cloudsShadowColor)), 0.125); //desaturate

	cloudsColor = mix(cloudsColor, cloudsShadowColor, cloudsShadow);
	
	vec4 diffuse;

	diffuse.rgb = mix(skyColor, cloudsColor, cloudsCutout);

	diffuse.rgb = colorCorrection(diffuse.rgb);
	
	
	if(isUnderWater > 0.9){
		diffuse.rgb = FOG_COLOR.rgb;
	}

	gl_FragColor.rgb = diffuse.rgb;
	gl_FragColor.a = 1.0;
}
