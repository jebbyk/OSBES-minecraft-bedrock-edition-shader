// __multiversion__

#include "fragmentVersionSimple.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"

uniform float TOTAL_REAL_WORLD_TIME;

#include "includes/constant.h"
#include "includes/func.glsl"

varying float height;
varying vec4 position;
varying float isUnderWater;

void main()
{

	float isRain = 1.0 - length(normalize(vec3(1.0)) - normalize(FOG_COLOR.rgb));// Calculate how complimentary fog color with gray color
		isRain = pow(isRain, 16.0);
	if(FOG_CONTROL.g > 0.95){
		isRain = 0.0;
	}

	vec3 clearSkyColor = pow(FOG_COLOR.rgb, vec3(0.6));
	vec3 clearSkyZenithColor = vec3(0.1, 0.2, 0.4) * length(clearSkyColor);
		clearSkyZenithColor = toLinear(clearSkyZenithColor);
	vec3 rainSkyColor = vec3(0.6, 0.6, 0.6) * length(FOG_COLOR.rgb);
		rainSkyColor = toLinear(rainSkyColor);

	float skyZenithEdgeOffset = 2.0;
	float skyAttenuation = 2.5;
	vec3 skyColor = mix(clearSkyZenithColor, clearSkyColor, pow(min(height * skyZenithEdgeOffset, 1.0), skyAttenuation));
		skyColor = mix(skyColor, rainSkyColor, isRain);

	float clouds = cloudsPerlin(4, position.xz);

	float cloudsShadow = pow(clamp(clouds * 1.5, 0.0, 1.0), 0.75);

	float cloudsCutout = pow(min(clouds * 1.75, 1.0), 1.0 * isRain + 64.0 * (1.0 - isRain));

	vec3 cloudsColor = vec3(1.5) * pow(length(FOG_COLOR.gb), 2.0);
        cloudsColor = toLinear(cloudsColor);
	vec3 clearSkyCloudsShadowColor = (skyColor * (0.5 + pow(length(FOG_COLOR.gb), 2.0) * 0.5)) * 0.75;
	vec3 rainSkyCloudsShadowColor = cloudsColor * 2.0;
	vec3 cloudsShadowColor = mix(clearSkyCloudsShadowColor, rainSkyCloudsShadowColor, isRain);

		cloudsShadowColor = mix(cloudsShadowColor, vec3(length(cloudsShadowColor)), 0.125); //desaturate

		cloudsColor = mix(cloudsColor, cloudsShadowColor, cloudsShadow);

 	vec3 result = mix(skyColor, cloudsColor, cloudsCutout * (1.0-height));

	if(isUnderWater > 0.9){
		result = toLinear(FOG_COLOR.rgb);
	}

		result = colorCorrection(result);




	gl_FragColor = vec4(result, 1.0);
}
