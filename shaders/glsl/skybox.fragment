// __multiversion__

#include "fragmentVersionCentroid.h"

#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"
#include "util.h"

#include "uniformInterFrameConstants.h"

//settings
#include "includes/options/quality_settings/clouds/clouds_enabled.glsl"
#include "includes/options/quality_settings/clouds/clouds_details.glsl"
#include "includes/options/quality_settings/clouds/advanced_clouds_shadow.glsl"
#include "includes/options/quality_settings/other/tone_mapping_enabled.glsl"

//preset
#include "includes/options/preset/clouds.glsl"
#include "includes/options/preset/lighting.glsl"
#include "includes/options/preset/fogs.glsl"
#include "includes/options/preset/postprocessing.glsl"

#include "includes/color_correction.glsl"
#include "includes/random.glsl"
#include "includes/env_detectors.glsl"

varying vec4 position;

void main()
{
    float isUnderWater = detectUnderwater();
    
    if(isUnderWater < 0.5){
        float is_rain = detectRain();
    	is_rain = clamp(is_rain, 0.0, 1.0);// todo: have no idea why but clamp() doesnt work in detectRain() for this shader file
    
    
    	vec3 sphereNormal = normalize(-position.xyz);
    
    	float horizonOffset = -0.125;
    	float horizonScale = 4.0;
    
    	float horizon =  1.0 - abs(position.y + horizonOffset) / length(position.xyz);
    	horizon = pow(horizon, 16.0 / horizonScale);
    	horizon = clamp(horizon, 0.0, 1.0);
    	float zenith = 1.0 - horizon;
    
    	vec3 horizonColor = pow(FOG_COLOR.rgb, vec3(SKY_LIGHT_SATURATION));
    	
    	vec3 zenithColor = SKY_ZENITH_TINT * 0.5 * length(horizonColor);
    	// zenithColor = mix(zenithColor, horizonColor, is_rain);
    
    	vec3 skyColor = mix(zenithColor, horizonColor, horizon);
    	
    	
    	#ifdef CLOUDS_ENABLED
    		vec3 skyColorGrayscale = vec3((skyColor.r + skyColor.g + skyColor.b) / 3.0);
    		
    		highp vec2 cldCoord = vec2(-sphereNormal.x, sphereNormal.z);
    		cldCoord /= (abs(position.y + horizonOffset) / length(position.xyz));
    		
    		float clouds = cloudsPerlin(CLOUDS_DETAILS, cldCoord / CLOUDS_SCALE);
    
    		#ifdef ADVANCED_CLOUDS_SHADOW
    			float cloudsShadow = cloudsPerlin(0, cldCoord * 0.85 / CLOUDS_SCALE) * clouds;
    		#else
    			float cloudsShadow = clouds * 0.7;
    		#endif
    
    		clouds = pow(clamp(clouds *  CLOUDS_AMOUNT, 0.0, 1.0), mix(CLOUDS_SHARPNESS, 0.25, is_rain));
    		clouds = clamp(clouds, 0.0, 1.0);
    		cloudsShadow = pow(clamp(cloudsShadow * CLOUDS_AMOUNT * CLOUDS_SHADOW_SCALE, 0.0, 1.0), 1.0);
    
    
    		vec3 cloudsColor = vec3(1.75) * pow(length(skyColor.gb), 2.0);
    
    
    		float additionalRainShadowDesaturation = 0.5;
    		float resultShadowDesaturation = CLOUDS_SHADOW_DESATURATION + additionalRainShadowDesaturation * is_rain;
    
    		float additionalRainShadowDarkening = 0.1;
    		float resultDarkening = 1.0 - CLOUDS_SHADOW_DARKENING - (additionalRainShadowDarkening * is_rain);
    		
    		vec3 cloudsShadowColor = mix(skyColor.rgb, skyColorGrayscale, resultShadowDesaturation) * resultDarkening;
    
    		cloudsColor = mix(cloudsColor, cloudsShadowColor, cloudsShadow);
    
    		skyColor.rgb = mix(skyColor.rgb, cloudsColor, clouds * zenith);
    	#endif
    
    
    
    	//final stage
    	#ifdef TONE_MAPPING_ENABLED
    		skyColor.rgb = colorCorrection(skyColor.rgb);
    	#endif
    
    	gl_FragColor.rgb = skyColor.rgb;
    	gl_FragColor.a = 1.0;
    }else{
        //if not isUnderWater
        gl_FragColor.rgb = FOG_COLOR.rgb;
        gl_FragColor.a = 1.0;
    }
    
	
}
