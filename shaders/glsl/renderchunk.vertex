// __multiversion__

#include "vertexVersionCentroid.h"
#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#endif //VERSION

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif //BYPAS_PIXEL_SHADER

//#ifdef FOG
	varying vec4 fogColor;
//#endif //FOG


#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"


attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

varying float isWater;
varying float isUnderWater;

varying vec4 blueFog;
varying vec4 milkyFog;
varying vec4 position;
varying vec4 relativePosition;

varying float isRain;
const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; // WARNING: this value is also hardcoded in the water color, don't change

float isLeaves;
float isPlantTop;
void main()
{

	position = POSITION;



	fogColor = vec4(0.0);

    isRain = 0.5 - FOG_CONTROL.r;
    isRain = clamp(isRain * 5.0, 0.0, 1.0);

	isWater = 0.0;

    isUnderWater = 0.0;

	// Get the shade (not related to brightness) of fog_color
	vec3 fogColorNormalized = normalize(FOG_COLOR.rgb);
	if(fogColorNormalized.r < 0.22
	&& fogColorNormalized.b < 0.90 && fogColorNormalized.b > 0.77
	&& fogColorNormalized.g < 0.61 && fogColorNormalized.g > 0.44){
		isUnderWater = 1.0;
	}




// Water
#ifndef BYPASS_PIXEL_SHADER
	uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;

	isLeaves = 0.0;
	if(fract(position.y) <  0.01){
		isLeaves = 1.0;
	}


	isPlantTop = 0.0;
	if(isLeaves < 0.1 && fract(uv0.y * 16.0) > 0.5){
		isPlantTop = 1.0;
	}



    if(
		color.b > color.g * 0.84
		&& color.b > color.r * 1.69
	){
		isWater = 1.0;
	}
	float spruce = 0.0;
	if(color.b > 0.9 && color.r > 0.5 && color.g > 0.01 && color.g < 0.2 && color.r < 0.95){
		isWater = 0.0;
		spruce = 1.0;
		color.rgb = vec3(1.0);
	}

	if(isWater > 0.9){
		highp float t = TIME;
		highp vec3 rawPosCorrected = position.xyz / 2.5463;//2.5463 - chunk scale (detaching prevention)
		highp vec2 impulsesMovingSpeed = vec2(1.0);
		highp vec2 impulsesFreq = vec2(1.0);

		highp vec2 wavesMovingSpeed = vec2(1.0, 0.25);
		highp vec2 wavesFreq = vec2(2.0, 1.0);
		highp float wavesScale = 0.05;

		highp vec2 i = sin(t * impulsesMovingSpeed + rawPosCorrected.xz * impulsesFreq);
		highp vec2 f = pow(sin(t * wavesMovingSpeed + rawPosCorrected.xz * wavesFreq), vec2(3.0)) * wavesScale;

		position.y += (f.x + f.y) /* (f.x + f.y)*/;
	}

#endif //BYPASS_PIXEL_SHADER






// Leaves and grass
#if defined ALPHA_TEST

	//if((isWater < 0.1 && color.g > color.r) || spruce > 0.5 ){
	if((isLeaves > 0.5 || isPlantTop > 0.5) && isWater < 0.1 && color.g > color.r){
		// Wind waves
		vec3 correctedRawPos = position.xyz / 2.5463;//2.55 - size of chunk (prevent leaves detaching)
		highp float t = TIME;
		vec2 wavesScale = vec2(0.0125, 0.0125);
		float wavesMovingSpeed = 16.0 * (1.0 + floor(isRain + 0.5) * 0.5);
		float wavesFreq  = 4.0;

		// Wind impulses
		float impulsesMovingSpeed = 1.0;
		float impulsesScaleDevider = 1.0;// Should be greater then 1.0
		float impulseDuration = 4.0 / (1.0 + isRain * 2.0);// Bigger number = shorter impulse
		float f = sin(correctedRawPos.x * impulsesScaleDevider + impulsesMovingSpeed * t) * 0.5 + 0.5;
		f = clamp(pow(f, impulseDuration), 0.1 + isRain * 0.3, 1.0);
		wavesScale *= f * (1.0 + isRain * 2.0);

		position.xz += (1.0 + sin(t * wavesMovingSpeed + (correctedRawPos.x + correctedRawPos.z + correctedRawPos.y) * wavesFreq)) * wavesScale;
	}
#endif



POS4 worldPos;

#ifdef AS_ENTITY_RENDERER
		POS4 worldViewPosScaled = WORLDVIEWPROJ * position;
		worldPos = worldViewPosScaled;
#else
	worldPos.xyz = (position.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
	worldPos.w = 1.0;

	// Transform to view space before projection instead of all at once to avoid floating point errors
	// Not required for entities because they are already offset by camera translation before rendering
	// World position here is calculated above and can get huge
	POS4 worldViewPosScaled = WORLDVIEW * worldPos;
	worldViewPosScaled = PROJ * worldViewPosScaled;
#endif //AS_ENTITY_RENDERER

relativePosition.xyz = -worldPos.xyz;
relativePosition.w = worldPos.w;

gl_Position = worldViewPosScaled;

if(isUnderWater > 0.9){
	highp float t = TIME;
	float wScale = 0.0125 * length(worldPos.xyz);
	float wMovingSpeed = 4.0;
	float wFreq  = 32.0 / length(worldPos.xyz);

	gl_Position.x += (1.0 + sin(t * wMovingSpeed + (worldPos.x + worldPos.z + worldPos.y) * wFreq)) * wScale;
}




// Find distance from the camera

//#if defined(FOG) || defined(BLEND)
//#if defined(BLEND)

	#ifdef FANCY
		float cameraDepth = length(relativePosition.xyz);
	#else
		float cameraDepth = worldViewPosScaled.z;
	#endif
//#endif //FOG or BLEND



// Apply fog

//#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE;
	//float len = atan(cameraDepth/(RENDER_DISTANCE/2.0));
	#ifdef ALLOW_FADE
		len += RENDER_CHUNK_FOG_ALPHA;
	#endif //ALLOW_FADE

    fogColor.rgb = FOG_COLOR.rgb;
	 fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
//#endif //FOG



	blueFog.rgb = vec3(0.15,0.35,1.0);
	float ownFogAlpha = length(relativePosition.xyz) / RENDER_DISTANCE;
	blueFog.a = clamp(ownFogAlpha, 0.0, 0.75);
	blueFog.a = pow(blueFog.a, 2.0) * 0.3;

	milkyFog.rgb = mix(vec3(2.0), vec3(0.5), isRain);
	float milkyFogHeightShift = -32.0 + isRain * 128.0;
	float milkyFogHeightAtenuation = 1.0/64.0;
	milkyFog.a = (relativePosition.y + milkyFogHeightShift * ownFogAlpha) * milkyFogHeightAtenuation;
	milkyFog.a = pow(clamp(milkyFog.a, 0.0, 1.0), 1.5);
	milkyFog.a *= 0.1 + isRain*0.3;
	//milkyFog.a *= ownFogAlpha;
	//milkyFog.a = clamp(milkyFog.a, 0.0, 1.0);


/// Blended layer (mostly water) magic
#ifdef BLEND
	// Mega hack: only things that become opaque are allowed to have vertex-driven transparency in the Blended layer...
	// To fix this we'd need to find more space for a flag in the vertex format. color.a is the only unused part
	bool shouldBecomeOpaqueInTheDistance = color.a < 0.95;
	//bool shouldBecomeOpaqueInTheDistance = false;
	if(shouldBecomeOpaqueInTheDistance) {
		#ifdef FANCY  /////enhance water
			float cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
			color = COLOR;
		#else
			// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
			vec4 surfColor = vec4(color.rgb, 1.0);
			color = surfColor;

			float camDist = length(relativePosition.xyz);
			float cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif //FANCY

		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		color.a = mix(color.a, 1.0, alphaFadeOut);

	}
#endif //BLEND

#ifndef BYPASS_PIXEL_SHADER

	#ifndef FOG
		// If the FOG_COLOR isn't used, the reflection on NVN fails to compute the correct size of the constant buffer as the uniform will also be gone from the reflection data
		color.rgb += FOG_COLOR.rgb * 0.00001;
	#endif //FOG
#endif //BYPASS_PIXEL_SHADER
}
