// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 ES as appropriate.

#include "vertexVersionCentroid.h"
#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#endif //VERSION

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif //BYPAS_PIXEL_SHADER

//#ifdef FOG
	varying vec4 fogColor;
//#endif //FOG


#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"


#include "includes/env_detectors.glsl"
#include "includes/animations.glsl"

#include "includes/options/preset/fogs.glsl"
#include "includes/options/preset/animations.glsl"
#include "includes/options/quality_settings/animations/underwater_distortion.glsl"
#include "includes/options/quality_settings/animations/vegetation_animation.glsl"
#include "includes/options/quality_settings/animations/water_surface_animation.glsl"


attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

varying float isWater;
varying float isUnderWater;

varying vec4 distanceFog;
varying vec4 milkyFog;
varying vec4 position;
varying vec4 relativePosition;

varying float isRain;
const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; // WARNING: this value is also hardcoded in the water color, don't change

float isLeaves;
float isPlantTop;
void main()
{

	position = POSITION;
	


	fogColor = vec4(0.0);

  isRain = detectRain();

	isWater = 0.0;
    
  isUnderWater = detectUnderwater();




// Water
#ifndef BYPASS_PIXEL_SHADER
	uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;

	isLeaves = 0.0; 
	if(fract(position.y) <  0.01 && fract(position.x) < 0.01 && fract(position.z) < 0.01){
		isLeaves = 1.0;
	}


	isPlantTop = 0.0;
	if(isLeaves < 0.1 && fract(uv0.y * 16.0) < 0.5){
		isPlantTop = 1.0;
	}


#endif //BYPASS_PIXEL_SHADER

#ifdef BLEND
    if(

		color.b > color.g * 0.8

		&& color.b > color.r * 1.13
	){
		isWater = 1.0;
	}
	
	#if defined(WATER_SURFACE_ANIMATION)
	  if(isWater > 0.9){
		 position.y += calculateWaterSurfaceAnimation(position.xyz);
	  }
	#endif
#endif



// Leaves and grass
#if defined ALPHA_TEST

	#if defined(VEGETATION_ANIMATION)
		if((isLeaves > 0.5 || isPlantTop > 0.5) && color.g > (color.r + color.b)/2.0 ){
			position.xz += calculateVegetationAnimation(position.xyz, isRain);
		}
	#endif
#endif



POS4 worldPos;
	
#ifdef AS_ENTITY_RENDERER
		POS4 worldViewPosScaled = WORLDVIEWPROJ * position;
		worldPos = worldViewPosScaled;
#else
	worldPos.xyz = (position.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
	worldPos.w = 1.0;

	// Transform to view space before projection instead of all at once to avoid floating point errors
	// Not required for entities because they are already offset by camera translation before rendering
	// World position here is calculated above and can get huge
	POS4 worldViewPosScaled = WORLDVIEW * worldPos;
	worldViewPosScaled = PROJ * worldViewPosScaled;
#endif //AS_ENTITY_RENDERER

relativePosition.xyz = -worldPos.xyz;
relativePosition.w = worldPos.w;

gl_Position = worldViewPosScaled;

#if defined(UNDERWATER_DISTORTION)
	if(isUnderWater > 0.9){
		gl_Position.xy += calculateUnderwaterAnimation(worldViewPosScaled.xyz);
	}
#endif



// Find distance from the camera

//#if defined(FOG) || defined(BLEND)
//#if defined(BLEND)
	
	#ifdef FANCY
		float cameraDepth = length(relativePosition.xyz);
	#else
		float cameraDepth = worldViewPosScaled.z;
	#endif
//#endif //FOG or BLEND



// Apply fog

//#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE;
	//float len = atan(cameraDepth/(RENDER_DISTANCE/2.0));
	#ifdef ALLOW_FADE
		len += RENDER_CHUNK_FOG_ALPHA;
	#endif //ALLOW_FADE

    fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
//#endif //FOG

	

	distanceFog.rgb = DISTANCE_FOG_TINT;
	float ownFogAlpha = length(relativePosition.xyz) / RENDER_DISTANCE;
	distanceFog.a = clamp(pow(ownFogAlpha, DISTANCE_FOG_START), 0.0, 0.75);
	
	milkyFog.rgb = mix(vec3(2.0), vec3(0.5), isRain);
	float milkyFogHeightShift = -RENDER_DISTANCE/HORIZONTAL_FOG_HEIGHT + isRain * 8.0;
	float milkyFogHeightAtenuation = (isRain + 1.0) / (RENDER_DISTANCE / HORIZONTAL_FOG_SHARPNESS);
	milkyFog.a = (relativePosition.y + milkyFogHeightShift) * milkyFogHeightAtenuation;
	milkyFog.a = clamp(milkyFog.a, 0.0, 1.0);
	milkyFog.a *= HORIZONTAL_FOG_MAX + isRain*(1.0 - HORIZONTAL_FOG_MAX);
	milkyFog.a = clamp(milkyFog.a, 0.0, 1.0);


/// Blended layer (mostly water) magic
#ifdef BLEND
	// Mega hack: only things that become opaque are allowed to have vertex-driven transparency in the Blended layer...
	// To fix this we'd need to find more space for a flag in the vertex format. color.a is the only unused part
	bool shouldBecomeOpaqueInTheDistance = color.a < 0.95;
	//bool shouldBecomeOpaqueInTheDistance = false;
	if(shouldBecomeOpaqueInTheDistance) {
		#ifdef FANCY  /////enhance water
			float cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
			color = COLOR;
		#else
			// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
			vec4 surfColor = vec4(color.rgb, 1.0);
			color = surfColor;
				
			float camDist = length(relativePosition.xyz);
			float cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif //FANCY
		
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		color.a = mix(color.a, 1.0, alphaFadeOut);
		
	}
#endif //BLEND

#ifndef BYPASS_PIXEL_SHADER

	#ifndef FOG
		// If the FOG_COLOR isn't used, the reflection on NVN fails to compute the correct size of the constant buffer as the uniform will also be gone from the reflection data
		color.rgb += FOG_COLOR.rgb * 0.00001;
	#endif //FOG
#endif //BYPASS_PIXEL_SHADER
}